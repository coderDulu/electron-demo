{"version":3,"file":"./main.js","mappings":";;;;;;;;;;;;;;;;AAAyD;AACzD;AACA;AACA;AACA;AACA;AACA,gBAAgB,mEAA6B;AAC7C;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,sBAAsB,QAAQ,2DAAqB;AAC/D;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH;AACA;AACA;AACe;AACf;AACA;AACA,IAAI,gDAAU;AACd,GAAG;AACH;AACA;AACA;AACA,IAAI,oDAAc;AAClB,GAAG;AACH;AACA;;;;;;;;;;;;;;;;ACtCA;AACgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,QAAQ,eAAe;AACvB;AACA,GAAG;AACH;AACA;AACA;AACA,QAAQ,eAAe;AACvB,QAAQ,eAAe;AACvB,QAAQ,eAAe;AACvB,QAAQ,eAAe;AACvB;AACA;AACA;AACA;AACA;AACA;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA,iBAAiB,4DAAsB;AACvC;AACA;AACA,EAAE,6DAAuB;AACzB;;;;;;;;;;ACvDA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;ACN8C;AACV;AACZ;AACa;AACF;AACnC;AACA;AACA;AACA;AACA,qBAAqB,mDAAa;AAClC;AACA;AACA;AACA,qBAAqB,gDAAS;AAC9B;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,QAAQ,wDAAK;AACb;AACA;AACA;AACA;AACA,+BAA+B,mDAAY;AAC3C;AACA;AACA;AACA;AACA,IAAI,wDAAgB;AACpB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,mDAAa;AACb;AACA,IAAI,wDAAM;AACV;AACA;AACA,CAAC;AACD;AACA,4CAAM;AACN;AACA;AACA,QAAQ,8CAAQ;AAChB;AACA,CAAC;AACD,4CAAM;AACN;AACA;AACA;AACA;AACA,CAAC","sources":["webpack://demo01/./main/listen.js","webpack://demo01/./main/menu.js","webpack://demo01/external commonjs \"electron\"","webpack://demo01/external commonjs \"electron-is-dev\"","webpack://demo01/external node-commonjs \"path\"","webpack://demo01/webpack/bootstrap","webpack://demo01/webpack/runtime/compat get default export","webpack://demo01/webpack/runtime/define property getters","webpack://demo01/webpack/runtime/hasOwnProperty shorthand","webpack://demo01/webpack/runtime/make namespace object","webpack://demo01/./main.ts"],"sourcesContent":["import { BrowserWindow, dialog, ipcMain } from 'electron'\r\n\r\n// 渲染器进程 -> 主进程\r\nconst onEvent = {\r\n  'set-title': (event, title) => {\r\n    const webContents = event.sender;\r\n    const win = BrowserWindow.fromWebContents(webContents);\r\n    win.setTitle(title)\r\n  },\r\n  'counter-value': (event, value) => {\r\n    console.log('main -> ', value);\r\n  }\r\n}\r\n\r\n// 双向\r\nconst onHandle = {\r\n  'dialog:openFile': async () => {\r\n    const { canceled, filePaths } = await dialog.showOpenDialog()\r\n    if(canceled) {\r\n      return\r\n    } else {\r\n      return filePaths[0]\r\n    }\r\n  },\r\n  \r\n}\r\n\r\nexport default function listen() {\r\n  // 添加主进程监听\r\n  Object.keys(onEvent).forEach(event => {\r\n    ipcMain.on(event, onEvent[event]);\r\n  })\r\n\r\n  // 添加进程双向监听\r\n  Object.keys(onHandle).forEach(event => {\r\n    ipcMain.handle(event, onHandle[event]);\r\n  })\r\n\r\n}","// 1. 导入electron中的Menu\r\nimport { Menu } from \"electron\";\r\n\r\n\r\n// 2. 创建菜单模板，数组中的每一个对象都是一个菜单\r\nconst template = [\r\n  {\r\n    label: '菜单一',\r\n    submenu: [\r\n      {\r\n        label: '子菜单一',\r\n        // 添加快捷键\r\n        accelerator: 'ctrl+n',\r\n        click: function () {\r\n          this.webContents && this.webContents.openDevTools();\r\n        }\r\n      },\r\n      {\r\n        label: '子菜单二', \r\n        click: function () {\r\n          this.webContents && this.webContents.send(\"update-counter\", 1);\r\n        }\r\n      },\r\n      { label: '子菜单三' },\r\n    ]\r\n  },\r\n  {\r\n    label: '菜单二',\r\n    submenu: [\r\n      { label: '子菜单一' },\r\n      { label: '子菜单二' },\r\n      { label: '子菜单三' },\r\n      { label: '子菜单四' },\r\n    ]\r\n  }\r\n]\r\n\r\n\r\n\r\nexport default function createMenu() {\r\n\r\n  // 2.1 为template中事件添加this\r\n  template.forEach(item => {\r\n    item.click && (item.click = item.click.bind(this));\r\n\r\n    item.submenu && item.submenu.forEach(sub => {\r\n      sub.click && (sub.click = sub.click.bind(this));\r\n    })\r\n  })\r\n\r\n  // 3. 从模板中创建菜单\r\n  const myMenu = Menu.buildFromTemplate(template);\r\n\r\n  // 4. 设置为应用程序菜单\r\n  Menu.setApplicationMenu(myMenu);\r\n}","module.exports = require(\"electron\");","module.exports = require(\"electron-is-dev\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { app, BrowserWindow } from 'electron';\r\nimport isDev from 'electron-is-dev';\r\nimport path from 'path';\r\nimport createMenu from './main/menu';\r\nimport listen from './main/listen';\r\n// 定义变量\r\nvar mainWindow = null;\r\n// 新建窗口\r\nfunction createWindow() {\r\n    mainWindow = new BrowserWindow({\r\n        width: 800,\r\n        height: 600,\r\n        webPreferences: {\r\n            preload: path.join(__dirname, './main/preload.js'),\r\n            nodeIntegration: true,\r\n            contextIsolation: true, //开启上下文隔离，通过preload进行通信\r\n        },\r\n    });\r\n    // 加载react\r\n    // 打开开发者工具\r\n    if (isDev) {\r\n        mainWindow.loadURL('http://localhost:3000');\r\n        mainWindow.webContents.openDevTools();\r\n    }\r\n    else {\r\n        var startUrl = new URL(path.resolve(__dirname, './build/index.html'));\r\n        startUrl.protocol = 'file:';\r\n        mainWindow.loadURL(startUrl.href);\r\n    }\r\n    // 自定义菜单\r\n    createMenu.apply(mainWindow);\r\n    // 关闭window时触发\r\n    mainWindow.on('closed', function () {\r\n        mainWindow = null;\r\n    });\r\n}\r\n// 当electron完成初始化并准备创建浏览器窗口时调用此方法\r\napp.whenReady().then(function () {\r\n    // 添加监听\r\n    listen();\r\n    // 创建窗口\r\n    createWindow();\r\n});\r\n// 所有窗口关闭时退出应用\r\napp.on('window-all-closed', function () {\r\n    // macOS中除非用户按下 `Cmd + Q` 显式退出,否则应用与菜单栏始终处于活动状态.\r\n    if (process.platform !== 'darwin') {\r\n        app.quit();\r\n    }\r\n});\r\napp.on('activate', function () {\r\n    // macOS中点击Dock图标时没有已打开的其余应用窗口时,则通常在应用中重建一个窗口\r\n    if (mainWindow === null) {\r\n        createWindow();\r\n    }\r\n});\r\n"],"names":[],"sourceRoot":""}